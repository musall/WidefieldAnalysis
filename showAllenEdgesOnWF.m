function showAllenEdgesOnWF(WFIm, transParams, dorsalMaps, trimOutOfBrain, newFig)
% showAllenEdgesOnWF(WFIm, transParams, dorsalMaps [, trimOutOfBrain] [, newFig])
% 
% Superimpose the area borders from the Allen atlas on a widefield image.
% 
% INPUTS
% WFIm         -- widefield image
% transParams  -- rotation/translation parameters returned by
%                 alignBrainToAllen
% dorsalMaps   -- the dorsal projections of the Allen maps (from the file
%                 AllenDorsalMap, generated by computeAllenDorsalMaps)
% trimOutOfBrain -- optional, whether to zero-out parts of the image
%                   outside the brain. Default 0.
% newFig       -- optional. Whether to spawn a new figure. Default 1.


%% Parameters

edgeColor = [0 1 1];


%% Optional arguments

if ~exist('trimOutOfBrain', 'var')
  trimOutOfBrain = 0;
end

if ~exist('newFig', 'var')
  newFig = 1;
end


%% Transform widefield image

WF = alignAllenTransImMasked(WFIm, transParams, 0);


%% Prep colormaps

cRes = 255;

minWF = min(WF(:));
maxWF = max(WF(:));
level = (maxWF - minWF) / cRes;
cmap = [gray(cRes); edgeColor];


%% Trim edgeMap to size

edgeMap = dorsalMaps.edgeMapScaled;
edgeMap = edgeMap(1:min(size(edgeMap, 1), size(WF, 1)), 1:min(size(edgeMap, 2), size(WF, 2)));


%% If requested, zero out out-of-brain pixels

if trimOutOfBrain
  % Trim mask to size of WFIm (but could be smaller)
  maskOrig = dorsalMaps.maskScaled;
  maskOrig = maskOrig(1:min(size(maskOrig, 1), size(WF, 1)), 1:min(size(maskOrig, 2), size(WF, 2)));
  % Ensure mask is as big as WFIm
  mask = zeros(size(WF));
  mask(1:size(maskOrig, 1), 1:size(maskOrig, 2)) = maskOrig;

  WF = WF .* mask;
end


%% Plot

if newFig
  figure;
end

imagesc(WF);
hold on;

hi = imagesc(edgeMap * (maxWF + level));
hi.AlphaData = edgeMap;
hi.AlphaDataMapping = 'scaled';

axis equal off;
colormap(cmap);
